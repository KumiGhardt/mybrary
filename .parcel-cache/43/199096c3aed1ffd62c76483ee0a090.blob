var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _propTypes = require('prop-types');
  var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _reactRouterDom = require('react-router-dom');
  var _reactRedux = require('react-redux');
  var _reactBootstrap = require('react-bootstrap');
  var _jsxFileName = "/Users/kumi/Codebase/react/mybrary/src/components/profile-view/profile-view.jsx";
  class ProfileView extends _reactDefault.default.Component {
    constructor() {
      super();
      this.state = {
        Username: null,
        Password: null,
        Email: null,
        Birthday: null,
        FavoriteMovies: [],
        validated: null
      };
    }
    componentDidMount() {
      const accessToken = localStorage.getItem('token');
      const user = JSON.parse(localStorage.getItem('user'));
      console.log({
        user
      });
      // .split converts the string into an array
      const favoritemovies = localStorage.getItem('favoriteMovies').split(',');
      this.setState({
        FavoriteMovies: favoritemovies
      });
      if (accessToken !== null) {
        this.getUser(accessToken);
      }
    }
    getUser(token) {
      const Username = JSON.parse(localStorage.getItem('user')).Username;
      _axiosDefault.default.get('https://kumi-movie-index.herokuapp.com/users', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // filter current user
        const currentUser = response.data.filter(item => item.Username === Username);
        this.setState({
          Username: currentUser[0].Username,
          Password: currentUser[0].Password,
          Email: currentUser[0].Email,
          Birthday: currentUser[0].Birthday,
          FavoriteMovies: currentUser[0].FavoriteMovies
        });
      }).catch(function (error) {
        console.log(error);
      });
    }
    handleRemoveFavorite(e, movie) {
      console.log(movie);
      e.preventDefault();
      const username = JSON.parse(localStorage.getItem('user')).Username;
      const token = localStorage.getItem('token');
      _axiosDefault.default.delete(`https://kumi-movie-index.herokuapp.com/users/${username}/movies/${movie}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(() => {
        alert('Movie was removed from your Favorites List.');
        this.componentDidMount();
      }).catch(function (error) {
        console.log(error);
      });
    }
    /*change user details*/
    handleUpdate(e, newUsername, newPassword, newEmail, newBirthday) {
      this.setState({
        validated: null
      });
      const form = e.currentTarget;
      if (form.checkValidity() === false) {
        e.preventDefault();
        e.stopPropagation();
        this.setState({
          validated: true
        });
        return;
      }
      e.preventDefault();
      const token = localStorage.getItem('token');
      const username = JSON.parse(localStorage.getItem('user')).Username;
      _axiosDefault.default({
        method: 'put',
        url: `${'https://kumi-movie-index.herokuapp.com/'}users/${username}`,
        headers: {
          Authorization: `Bearer ${token}`
        },
        data: {
          Username: newUsername ? newUsername : this.state.Username,
          Password: newPassword ? newPassword : this.state.Password,
          Email: newEmail ? newEmail : this.state.Email,
          Birthday: newBirthday ? newBirthday : this.state.Birthday
        }
      }).then(response => {
        console.log({
          response
        });
        this.setState({
          Username: response.data.Username,
          Password: response.data.Password,
          Email: response.data.Email,
          Birthday: response.data.Birthday
        });
        alert('Changes have been saved!');
        localStorage.setItem('user', JSON.stringify(response.data));
        // this.props.history.push(`/users/${username}`);
        window.location.pathname = `/users/${username}`;
      }).catch(function (error) {
        console.log(error);
      });
    }
    /*deregister*/
    handleDeregister() {
      const token = localStorage.getItem('token');
      const user = JSON.parse(localStorage.getItem("user")).Username;
      _axiosDefault.default.delete(`https://kumi-movie-index.herokuapp.com/users/${user}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(() => {
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        alert('Your account has been deleted');
        // this.props.history.push(`/`);
        window.location.pathname = `/login`;
      }).catch(e => {
        console.log(e);
      });
    }
    setUsername(input) {
      this.Username = input;
    }
    setPassword(input) {
      this.Password = input;
    }
    setEmail(input) {
      this.Email = input;
    }
    setBirthday(input) {
      this.Birthday = input;
    }
    render() {
      const {user, validated, FavoriteMovies} = this.state;
      console.log({
        FavoriteMovies
      });
      const {movies} = this.props;
      const username = JSON.parse(localStorage.getItem('user')).Username;
      // const  FavoriteMovies = this.props.movies.map(movie => (<div key={movie._id}></div>))
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Container, {
          className: "profile-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 187,
            columnNumber: 7
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tabs, {
          defaultActiveKey: "profile",
          transition: false,
          className: "profile-tabs",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 188,
            columnNumber: 9
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab, {
          className: "tab-item",
          eventKey: "profile",
          title: "Profile",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 190,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card, {
          className: "profile-card",
          border: "info",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 191,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Title, {
          className: "profile-title",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 192,
            columnNumber: 17
          }
        }, username, "'s Favorite Movies"), FavoriteMovies.length === 0 && /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "card-content",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193,
            columnNumber: 49
          }
        }, "You don't have any favorite movies yet!"), /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "favorites-container",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 194,
            columnNumber: 17
          }
        }, FavoriteMovies.length > 0 && movies.map(movie => {
          if (movie._id === FavoriteMovies.find(favMovie => favMovie === movie._id)) {
            return (
              /*#__PURE__*/_reactDefault.default.createElement("div", {
                key: movie._id,
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 198,
                  columnNumber: 27
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card, {
                className: "favorites-item card-content",
                style: {
                  width: '16rem',
                  flex: 1
                },
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 199,
                  columnNumber: 29
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Title, {
                className: "movie-card-title",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 201,
                  columnNumber: 31
                }
              }, movie.Title), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Subtitle, {
                className: "text-muted fav-subtitle",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 202,
                  columnNumber: 31
                }
              }, movie.Year), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Body, {
                className: "movie-card-body",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 203,
                  columnNumber: 31
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Button, {
                size: "sm",
                className: "profile-button view-movie",
                variant: "info",
                as: _reactRouterDom.Link,
                to: `/movies/${movie._id}`,
                target: "_self",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 204,
                  columnNumber: 33
                }
              }, "View Movie"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Button, {
                size: "sm",
                className: "profile-button remove-favorite",
                variant: "danger",
                onClick: e => this.handleRemoveFavorite(e, movie._id),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 207,
                  columnNumber: 33
                }
              }, "Remove"))))
            );
          }
        })))), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab, {
          className: "tab-item",
          eventKey: "update",
          title: "Update",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 222,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card, {
          className: "update-card",
          border: "info",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 223,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Title, {
          className: "profile-title",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 224,
            columnNumber: 17
          }
        }, "Update Profile"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Subtitle, {
          className: "card-subtitle-update",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 225,
            columnNumber: 17
          }
        }, "Please leave any fields not being updated empty.", /*#__PURE__*/_reactDefault.default.createElement("span", {
          className: "password-instructions",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 226,
            columnNumber: 19
          }
        }, " *You must enter in either a new or existing password to verify the change!")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Body, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 228,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form, {
          noValidate: true,
          validated: validated,
          className: "update-form",
          onSubmit: e => this.handleUpdate(e, this.Username, this.Password, this.Email, this.Birthday),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 229,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Group, {
          controlId: "formBasicUsername",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 230,
            columnNumber: 19
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Label, {
          className: "form-label",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 231,
            columnNumber: 21
          }
        }, "Username"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control, {
          type: "text",
          placeholder: "Change Username",
          onChange: e => this.setUsername(e.target.value),
          pattern: "[a-zA-Z0-9]{5,}",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 232,
            columnNumber: 21
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control.Feedback, {
          type: "invalid",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 233,
            columnNumber: 21
          }
        }, "Please enter a valid username with at least 5 alphanumeric characters.")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Group, {
          controlId: "formBasicPassword",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235,
            columnNumber: 19
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Label, {
          className: "form-label",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 236,
            columnNumber: 21
          }
        }, "Password ", /*#__PURE__*/_reactDefault.default.createElement("span", {
          className: "required",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 237,
            columnNumber: 32
          }
        }, "*")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control, {
          type: "password",
          placeholder: "Current or New Password",
          onChange: e => this.setPassword(e.target.value),
          pattern: ".{5,}",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 239,
            columnNumber: 21
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control.Feedback, {
          type: "invalid",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 240,
            columnNumber: 21
          }
        }, "Please enter a valid password with at least 5 characters.")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Group, {
          controlId: "formBasicEmail",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 242,
            columnNumber: 19
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Label, {
          className: "form-label",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 243,
            columnNumber: 21
          }
        }, "Email"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control, {
          type: "email",
          placeholder: "Change Email",
          onChange: e => this.setEmail(e.target.value),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 244,
            columnNumber: 21
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control.Feedback, {
          type: "invalid",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245,
            columnNumber: 21
          }
        }, "Please enter a valid email address.")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Group, {
          controlId: "formBasicBirthday",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 247,
            columnNumber: 19
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Label, {
          className: "form-label",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 248,
            columnNumber: 21
          }
        }, "Birthday"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control, {
          type: "date",
          placeholder: "Change Birthday",
          onChange: e => this.setBirthday(e.target.value),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 249,
            columnNumber: 21
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Form.Control.Feedback, {
          type: "invalid",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 250,
            columnNumber: 21
          }
        }, "Please enter a valid birthday.")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Button, {
          className: "update-profile-button",
          type: "submit",
          variant: "info",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 252,
            columnNumber: 19
          }
        }, "Update"))))), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab, {
          className: "tab-item",
          eventKey: "delete",
          title: "Delete Profile",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 261,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card, {
          className: "update-card",
          border: "danger",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 262,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Title, {
          className: "profile-title",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 263,
            columnNumber: 15
          }
        }, "Delete Your Profile"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Subtitle, {
          className: "text-muted",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 264,
            columnNumber: 15
          }
        }, "If you delete your account, it cannot be recovered."), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Body, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 265,
            columnNumber: 15
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Button, {
          className: "button",
          variant: "danger",
          onClick: e => this.handleDeregister(e),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 266,
            columnNumber: 17
          }
        }, "Click Here If You're Sure!"))))))
      );
    }
  }
  ProfileView.propTypes = {
    movies: _propTypesDefault.default.array.isRequired
  };
  // retrieve movies and users from global state
  let mapStateToProps = state => {
    return {
      movies: state.movies
    };
  };
  exports.default = _reactRedux.connect(mapStateToProps)(ProfileView);
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
